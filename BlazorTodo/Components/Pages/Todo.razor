@page "/todo"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h1>Todo</h1>

<_inputBar SearchTerm="@SearchTerm" SearchTermChanged="OnSearchTermChanged"></_inputBar>

<br />

<_filterBar SortChanged="OnSortChanged" Sort="@Sort"></_filterBar>"

<ul class="mt-3">
  @foreach (var todo in FilteredTodos()) {
    <li class="list-unstyled mt-1">
      <_todoItem ToDo="@todo" ToDoChanged="@(newToDo => OnTodoChanged(todo, newToDo))"></_todoItem>
    </li>
  }
</ul>

<div class="row">
  <div class="col-md-6">
    <div class="input-group mt-3">
      <input type="text" class="form-control" placeholder="New Todo" @bind="NewToDo.Title" />
      <div class="input-group-append">
        <button class="btn btn-primary" @onclick="AddNewTodo">Add</button>
      </div>
    </div>
  </div>
</div>

@code {
  private string SearchTerm { get; set; } = string.Empty;
  private TodoItem NewToDo { get; set; } = new();
  private List<TodoItem> Todos { get; set; } = [];
  private string Sort { get; set; } = string.Empty;

  protected override void OnInitialized() {
    Todos = new List<TodoItem> {
      new TodoItem { Title = "Buy milk" },
      new TodoItem { Title = "Buy bread" },
      new TodoItem { Title = "Buy butter" }
    };
  }

  private async Task OnSearchTermChanged(string newSearchTerm) {
    SearchTerm = newSearchTerm;
    await InvokeAsync(StateHasChanged);
  }

  private async Task OnTodoChanged(TodoItem originalTodo, TodoItem newTodo) {
    if (newTodo == null) {
      var result = JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this todo?");
      if (await result) {
        Todos.Remove(originalTodo);
      }
    }
    else {
      int index = Todos.IndexOf(originalTodo);
      if (index != -1) {
        Todos[index] = newTodo;
      }
    }
    await Task.CompletedTask;
  }

  private void AddNewTodo(MouseEventArgs e) {
    if (!string.IsNullOrWhiteSpace(NewToDo.Title)) {
      TodoItem todoItem = new() { Title = NewToDo.Title };
      Todos.Add(todoItem);
      NewToDo = new();
      SearchTerm = string.Empty;
    }
  }

  private IEnumerable<TodoItem> FilteredTodos() {
    Todos = Sort switch {
      "Active" => Todos.OrderBy(t => t.IsCompleted).ToList(),
      "Completed" => Todos.OrderBy(t => !t.IsCompleted).ToList(),
      _ => Todos
    };

    if (string.IsNullOrWhiteSpace(SearchTerm))
      return Todos;

    return Todos.Where(t => t.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
  }

  private async Task OnSortChanged(string newSort) {
    Sort = newSort;
    await InvokeAsync(StateHasChanged);
  }
}
